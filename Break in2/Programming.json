 [
  
  {
  "questionType":"Programming",
  "question":"Reorder the following to build a Swift program that sums integers from 1 to 10.",
  "codePassage": ["int total = 0;",
                  "for (int i=0; i < 11; i++)",
                  "{",
                  "total += i;",
                  "}"],
  "feedback": ["//Initialise a variable to store the total",
               "int total = 0;",
               "//Use for loop to iterate from 1 to 10",
               "for (int i=1; i < 11; i++)",
               "{",
               "//Increment i by 1",
               "total += i;",
               "}"]
  },
  
  {
  "questionType":"Programming",
  "question":"Reorder the following to build a C# program that returns the largest of 3 numbers.",
  "codePassage": ["public static long FindLargestNumber(long a, long b, long c)",
                  "{",
                  "long largest = a;",
                  "if (b > largest)",
                  "{",
                  "largest = b;",
                  "if (c > largest)",
                  "{",
                  "largest = c;",
                  "}",
                  "return largest;",
                  "}"],
  "feedback": ["//Find the largest of three numbers",
               "public static long FindLargestNumber(long a, long b, long c)",
               "{",
               "//Assume that the first value is the largest",
               "long largest = a;",
               "//Check if the other two are larger",
               "if (b > largest)",
               "{",
               "largest = b;",
               "if (c > largest)",
               "{",
               "largest = c;",
               "}",
               "//Return largest of the three",
               "return largest;",
               "}"]
  },
  
  {
  "questionType":"Programming",
  "question":"Reorder the following to build a C# program that returns TRUE if the input number is a palindrome (equal to the reverse of itself). HINT: In C#, while follows do!",
  "codePassage": ["public static bool IsThisAPalindrome(long number)",
                  "{",
                  "long reverse = ReverseNumber(number);",
                  "return (number == reverse);",
                  "}",
                  "private static long ReverseNumber(long number)",
                  "{",
                  "long retVal = 0;",
                  "do",
                  "{",
                  "retVal = (retVal * 10) + (number % 10);",
                  "number = number / 10;",
                  "}",
                  "while (number != 0);",
                  "return retVal;",
                  "}"],
  "feedback": ["//Compare the input number to the reverse of itself",
               "public static bool IsThisAPalindrome(long number)",
               "{",
               "//Build a function that returns the reverse of its input",
               "long reverse = ReverseNumber(number);",
               "//Return TRUE if the number is the opposite of itself",
               "return (number == reverse);",
               "}",
               "private static long ReverseNumber(long number)",
               "{",
               "long retVal = 0;",
               "do",
               "{",
               "//Use the modulus operator to find the last digit",
               "retVal = (retVal * 10) + (number % 10);",
               "//Drop the last digit from the number",
               "number = number / 10;",
               "}",
               "//Implement do code whilst number is not 0",
               "while (number != 0);",
               "return retVal;",
               "}"]
  },
  
  {
  "questionType":"Programming",
  "question":"Reorder the following to build a C/C++ function that determines the length of a string.",
  "codePassage": ["int StringLength(char *input)",
                  "{",
                  "int length = 0;",
                  "while (*input)",
                  "{",
                  "length++;",
                  "input++;",
                  "}",
                  "return length;",
                  "}"],
  "feedback": ["//Keep counting characters until the end of the string is reached",
               "int StringLength(char *input)",
               "{",
               "int length = 0;",
               "//Loop through the entire string",
               "while (*input)",
               "{",
               "//Increment the counter",
               "length++;",
               "//Move onto the next character",
               "input++;",
               "}",
               "return length;",
               "}"]
  },
  
  {
  "questionType":"Programming",
  "question":"Reorder the following to build a C/C++ program that overwrites a placeholder string with a new string.",
  "codePassage": ["void StringCopy(char* oldString, char *newString)",
                  "{",
                  "while (*newString)",
                  "{",
                  "*oldString = *newString;",
                  "oldString++;",
                  "newString++;",
                  "}",
                  "*oldString = '\\0';",
                  "}"],
  "feedback": ["//Copy new string over existing string",
               "void StringCopy(char* oldString, char *newString)",
               "{",
               "//Loop through the new string and replace the characters in the old string",
               "while (*newString)",
               "{",
               "*oldString = *newString;",
               "//Move on to the next characters",
               "oldString++;",
               "newString++;",
               "}",
               "//Terminate the old string",
               "*oldString = '\\0';",
               "}"]
  },
  {
  "questionType":"Programming",
  "question":"Reorder the following to build a Swift program that returns the name, Alice.",
  "codePassage": ["func votersname() -> String",
                  "{",
                  "return \"Alice\"",
                  "}",
                  "print(votersname())",
                  "}"],
  "feedback": ["//Function takes no input but returns a string",
               "func votersname() -> String",
               "{",
               "return \"Alice\"",
               "}",
               "print(votersname())",
               "}"]
  },
  {
  "questionType":"Programming",
  "question":"Reorder the following to build a personal details program in Swift by using a class and method (otherwise known as a function).",
  "codePassage": ["class personalDetails",
                  "{",
                  "func hello(name: String, age: Int, location: String)",
                  "{",
                  "print(String(My name is\\(name). I live in \\(location). I am \\(age) years old)",
                  "}",
                  "}",
                  "let myFunClass = personalDetails()",
                  "myFunClass.hello(\"James Bond\", 007, \"Hampshire\")"],
  "feedback": ["//Creat class",
               "class personalDetails",
               "{",
               "func hello(name: String, age: Int, location: String)",
               "{",
               "print(String(String(My name is\\(name). I live in \\(location). I am \\(age) years old)",
               "}",
               "}",
               "//Instantiate personal details class",
               "let myFunClass = personalDetails()",
               "//Call function from that class",
               "myFunClass.hello(\"James Bond\", 007, \"Hampshire\")"]
  },
  {
  "questionType":"Programming",
  "question":"Reorder the following to build a name-swap Swift program using inout parameters, then call it at the end.",
  "codePassage": ["var name1 = \"Giando\"",
                  "var name2 = \"Rosetta\"",
                  "func nameSwap(inout name1: String, inout name2: String)",
                  "{",
                  "let oldName1 = name1",
                  "name1 = name2",
                  "name2 = oldName1",
                  "}",
                  "}",
                  "nameSwap(&name1, &name2)"],
  "feedback": ["//Initialise variables",
               "var name1 = \"Giando\"",
               "var name2 = \"Rosetta\"",
               "//Name swap function",
               "func nameSwap(inout name1: String, inout name2: String)",
               "{",
               "let oldName1 = name1",
               "name1 = name2",
               "name2 = oldName1",
               "}",
               "}",
               "//pass external variables through inout function",
               "nameSwap(&name1, &name2)",
               "//name1 = Rosetta & name2 = Giando"]
  },
  {
  "questionType":"Programming",
  "question":"Reorder the following to build a Swift program that appends numbers to a name.",
  "codePassage": ["var name1 = \"Giando\"",
                  "func appendNumbersToName(var name: String, #maxNumber: Int) -> String",
                  "{",
                  "for i in 0..<maxNumber",
                  "{",
                  "name += String(i + 1)",
                  "}",
                  "return name",
                  "}",
                  "appendNumbersToName(name, maxNumber:3)"],
  "feedback": ["var name1 = \"Giando\"",
               "func appendNumbersToName(var name: String, #maxNumber: Int) -> String",
               "{",
               "for i in 1..<maxNumber",
               "{",
               "name += String(i + 1)",
               "}",
               "return name",
               "}",
               "//This will return Giando123",
               "appendNumbersToName(name, maxNumber:3)"]
  },
  {
  "questionType":"Programming",
  "question":"Reorder the following to build a Swift program that finds the range of the following numbers 1,4,67,78,24,5,6,546. HINT: Find max first!",
  "codePassage": ["func findRangeFromNumbers(numbers: Int...) -> (min: Int, max: Int)",
                  "{",
                  "var max = numbers[0]",
                  "var min = numbers[0]",
                  "for number in numbers",
                  "{",
                  "if number > max",
                  "{",
                  "max = number",
                  "}",
                  "if number < min {",
                  "min = number",
                  "}",
                  "}",
                  "return (min, max)",
                  "}",
                  "findRangeFromNumbers(1,4,67,78,24,5,6,546)"],
  "feedback": ["func findRangeFromNumbers(numbers: Int...) -> (min: Int, max: Int)",
               "{",
               "//No particular reason for finding max first, just for consistency",
               "var max = numbers[0]",
               "var min = numbers[0]",
               "//Loop through input range to find max and min",
               "for number in numbers",
               "{",
               "if number > max",
               "{",
               "max = number",
               "}",
               "if number < min {",
               "min = number",
               "}",
               "}",
               "return (min, max)",
               "}",
               "//This will return 1,546",
               "findRangeFromNumbers(1,4,67,78,24,5,6,546)"]
  }
  ]