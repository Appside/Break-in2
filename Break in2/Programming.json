 [
  
  {
  "questionType":"Programming",
  "question":"Reorder the following to build a Swift program that sums integers from 1 to 10.",
  "codePassage": ["int total = 0;",
                  "for (int i=0; i < 11; i++)",
                  "{",
                  "total += i;",
                  "}"],
  "feedback": ["// Initialise a variable to store the total",
               "int total = 0;",
               "// Use for loop to iterate from 1 to 10",
               "for (int i=1; i < 11; i++)",
               "{",
               "// Increment i by 1",
               "total += i;",
               "}"]
  },
  
  {
  "questionType":"Programming",
  "question":"Reorder the following to build a C# program that returns the largest of 3 numbers.",
  "codePassage": ["public static long FindLargestNumber(long a, long b, long c)",
                  "{",
                  "long largest = a;",
                  "if (b > largest)",
                  "{",
                  "largest = b;",
                  "if (c > largest)",
                  "{",
                  "largest = c;",
                  "}",
                  "return largest;",
                  "}"],
  "feedback": ["// Find the largest of three numbers",
               "public static long FindLargestNumber(long a, long b, long c)",
               "{",
               "// Assume that the first value is the largest",
               "long largest = a;",
               "// Check if the other two are larger",
               "if (b > largest)",
               "{",
               "largest = b;",
               "if (c > largest)",
               "{",
               "largest = c;",
               "}",
               "// Return largest of the three",
               "return largest;",
               "}"]
  },
  
  {
  "questionType":"Programming",
  "question":"Reorder the following to build a C# program that returns TRUE if the input number is a palindrome (equal to the reverse of itself). HINT: In C#, while follows do!",
  "codePassage": ["public static bool IsThisAPalindrome(long number)",
                  "{",
                  "long reverse = ReverseNumber(number);",
                  "return (number == reverse);",
                  "}",
                  "private static long ReverseNumber(long number)",
                  "{",
                  "long retVal = 0;",
                  "do",
                  "{",
                  "retVal = (retVal * 10) + (number % 10);",
                  "number = number / 10;",
                  "}",
                  "while (number != 0);",
                  "return retVal;",
                  "}"],
  "feedback": ["// Compare the input number to the reverse of itself",
               "public static bool IsThisAPalindrome(long number)",
               "{",
               "// Build a function that returns the reverse of its input",
               "long reverse = ReverseNumber(number);",
               "// Return TRUE if the number is the opposite of itself",
               "return (number == reverse);",
               "}",
               "private static long ReverseNumber(long number)",
               "{",
               "long retVal = 0;",
               "do",
               "{",
               "// Use the modulus operator to find the last digit",
               "retVal = (retVal * 10) + (number % 10);",
               "// Drop the last digit from the number",
               "number = number / 10;",
               "}",
               "// Implement do code whilst number is not 0",
               "while (number != 0);",
               "return retVal;",
               "}"]
  },
  
  {
  "questionType":"Programming",
  "question":"Reorder the following to build a C/C++ function that determines the length of a string.",
  "codePassage": ["int StringLength(char *input)",
                  "{",
                  "int length = 0;",
                  "while (*input)",
                  "{",
                  "length++;",
                  "input++;",
                  "}",
                  "return length;",
                  "}"],
  "feedback": ["// Keep counting characters until the end of the string is reached",
               "int StringLength(char *input)",
               "{",
               "int length = 0;",
               "// Loop through the entire string",
               "while (*input)",
               "{",
               "// Increment the counter",
               "length++;",
               "// Move onto the next character",
               "input++;",
               "}",
               "return length;",
               "}"]
  },
  
  {
  "questionType":"Programming",
  "question":"Reorder the following to build a C/C++ program that overwrites a placeholder string with a new string.",
  "codePassage": ["void StringCopy(char* oldString, char *newString)",
                  "{",
                  "while (*newString)",
                  "{",
                  "*oldString = *newString;",
                  "oldString++;",
                  "newString++;",
                  "}",
                  "*oldString = '\\0';",
                  "}"],
  "feedback": ["// Copy new string over existing string",
               "void StringCopy(char* oldString, char *newString)",
               "{",
               "// Loop through the new string and replace the characters in the old string",
               "while (*newString)",
               "{",
               "*oldString = *newString;",
               "// Move on to the next characters",
               "oldString++;",
               "newString++;",
               "}",
               "// Terminate the old string",
               "*oldString = '\\0';",
               "}"]
  },
  {
  "questionType":"Programming",
  "question":"Reorder the following to build a Swift program that returns the name, Alice.",
  "codePassage": ["func votersname() -> String",
                  "{",
                  "return \"Alice\"",
                  "}",
                  "print(votersname())"],
  "feedback": ["// Function takes no input but returns a string",
               "func votersname() -> String",
               "{",
               "return \"Alice\"",
               "}",
               "print(votersname())"]
  },
  {
  "questionType":"Programming",
  "question":"Reorder the following to build a personal details program in Swift by using a class and method (otherwise known as a function).",
  "codePassage": ["class personalDetails",
                  "{",
                  "func hello(name: String, age: Int, location: String)",
                  "{",
                  "print(String(My name is\\(name). I live in \\(location). I am \\(age) years old)",
                  "}",
                  "}",
                  "let myFunClass = personalDetails()",
                  "myFunClass.hello(\"James Bond\", 007, \"Hampshire\")"],
  "feedback": ["// Creat class",
               "class personalDetails",
               "{",
               "func hello(name: String, age: Int, location: String)",
               "{",
               "print(String(String(My name is\\(name). I live in \\(location). I am \\(age) years old)",
               "}",
               "}",
               "// Instantiate personal details class",
               "let myFunClass = personalDetails()",
               "// Call function from that class",
               "myFunClass.hello(\"James Bond\", 007, \"Hampshire\")"]
  },
  {
  "questionType":"Programming",
  "question":"Reorder the following to build a name-swap Swift program using inout parameters, then call it at the end.",
  "codePassage": ["var name1 = \"Giando\"",
                  "var name2 = \"Rosetta\"",
                  "func nameSwap(inout name1: String, inout name2: String)",
                  "{",
                  "let oldName1 = name1",
                  "name1 = name2",
                  "name2 = oldName1",
                  "}",
                  "}",
                  "nameSwap(&name1, &name2)"],
  "feedback": ["// Initialise variables",
               "var name1 = \"Giando\"",
               "var name2 = \"Rosetta\"",
               "// Name swap function",
               "func nameSwap(inout name1: String, inout name2: String)",
               "{",
               "let oldName1 = name1",
               "name1 = name2",
               "name2 = oldName1",
               "}",
               "}",
               "// pass external variables through inout function",
               "nameSwap(&name1, &name2)",
               "// name1 = Rosetta & name2 = Giando"]
  },
  {
  "questionType":"Programming",
  "question":"Reorder the following to build a Swift program that appends numbers to a name.",
  "codePassage": ["var name1 = \"Giando\"",
                  "func appendNumbersToName(var name: String, #maxNumber: Int) -> String",
                  "{",
                  "for i in 0..<maxNumber",
                  "{",
                  "name += String(i + 1)",
                  "}",
                  "return name",
                  "}",
                  "appendNumbersToName(name, maxNumber:3)"],
  "feedback": ["var name1 = \"Giando\"",
               "func appendNumbersToName(var name: String, #maxNumber: Int) -> String",
               "{",
               "for i in 1..<maxNumber",
               "{",
               "name += String(i + 1)",
               "}",
               "return name",
               "}",
               "// This will return Giando123",
               "appendNumbersToName(name, maxNumber:3)"]
  },
  {
  "questionType":"Programming",
  "question":"Reorder the following to build a Swift program that finds the range of the following numbers 1,4,67,78,24,5,6,546. HINT: Find max first!",
  "codePassage": ["func findRangeFromNumbers(numbers: Int...) -> (min: Int, max: Int)",
                  "{",
                  "var max = numbers[0]",
                  "var min = numbers[0]",
                  "for number in numbers",
                  "{",
                  "if number > max",
                  "{",
                  "max = number",
                  "}",
                  "if number < min {",
                  "min = number",
                  "}",
                  "}",
                  "return (min, max)",
                  "}",
                  "findRangeFromNumbers(1,4,67,78,24,5,6,546)"],
  "feedback": ["func findRangeFromNumbers(numbers: Int...) -> (min: Int, max: Int)",
               "{",
               "// No particular reason for finding max first, just for consistency",
               "var max = numbers[0]",
               "var min = numbers[0]",
               "// Loop through input range to find max and min",
               "for number in numbers",
               "{",
               "if number > max",
               "{",
               "max = number",
               "}",
               "if number < min {",
               "min = number",
               "}",
               "}",
               "return (min, max)",
               "}",
               "// This will return 1,546",
               "findRangeFromNumbers(1,4,67,78,24,5,6,546)"]
  },
  {
  "questionType":"Programming",
  "question":"Reorder the following to build a Swift program that determines whether the number of letters in a word is even or odd.",
  "codePassage": ["func findIfWordIsOddOrEven(word:String) -> String",
                  "{",
                  "var numberOfChars = word.characters.count",
                  "if (numberOfChars % 2) == 0",
                  "{",
                  "return \"Even\"",
                  "}",
                  "else if (numberOfChars % 2) == 1",
                  "{",
                  "return \"Odd\"",
                  "}",
                  "}"],
  "feedback": ["func findIfWordIsOddOrEven(word:String) -> String",
               "{",
               "// Get the number of characters in the string",
               "var numberOfChars = word.characters.count",
               "// Use the modulo operator to find remainder when numberOfChars is divided by 2",
               "if (numberOfChars % 2) == 0",
               "{",
               "// If there is no remainder, numberOfChars is even",
               "return \"Even\"",
               "}",
               "else if (numberOfChars % 2) == 1",
               "{",
               "// If the remainder is 1, numberOfChars is odd",
               "return \"Odd\"",
               "}",
               "}"]
  },
  {
  "questionType":"Programming",
  "question":"Reorder the following to build a Swift program that performs the Bubble Sort to an array of integers.",
  "codePassage": ["func bubbleSort(inputArray:[Int]) -> [Int]",
                  "{",
                  "for var i:Int = inputArray.count -1 ; i > 1 ; i--",
                  "{",
                  "for var j:Int = 0; j < i; j++",
                  "{",
                  "if inputArray[j] > inputArray[j + 1]",
                  "{",
                  "let temp = inputArray[j]",
                  "inputArray[j] = inputArray[j + 1]",
                  "inputArray[j + 1] = temp",
                  "}",
                  "}",
                  "}",
                  "return inputArray",
                  "}"],
  "feedback": ["func bubbleSort(inputArray:[Int]) -> [Int]",
               "{",
               "// For loop to prevent sorting numbers that have already been sorted",
               "for var i:Int = inputArray.count -1 ; i > 1 ; i--",
               "{",
               "// For loop to go through unsorted numbers",
               "for var j:Int = 0; j < i; j++",
               "{",
               "// Comparison to check if a number is greater than the next",
               "if inputArray[j] > inputArray[j + 1]",
               "{",
               "// Typical number swap",
               "let temp = inputArray[j]",
               "inputArray[j] = inputArray[j + 1]",
               "inputArray[j + 1] = temp",
               "}",
               "}",
               "}",
               "return inputArray",
               "}"]
  },
  {
  "questionType":"Programming",
  "question":"Reorder the following to build a Swift program that performs the Insertion Sort to an array of integers.",
  "codePassage": ["func insertionSort(inputArray:[Int]) -> [Int]",
                  "{",
                  "for var i:Int = 1 ; i < inputArray.count ; i++",
                  "{",
                  "var j:Int = i",
                  "while j > 0 && inputArray[i - 1] > inputArray[i]",
                  "{",
                  "let temp = inputArray[i]",
                  "inputArray[i] = inputArray[i - 1]",
                  "inputArray[i - 1] = temp",
                  "j--",
                  "}",
                  "}",
                  "return inputArray",
                  "}"],
  "feedback": ["func insertionSort(inputArray:[Int]) -> [Int]",
               "{",
               "// For loop to move through the input array",
               "for var i:Int = 1 ; i < inputArray.count ; i++",
               "{",
               "// Choose the first unsorted number",
               "var j:Int = i",
               "// While that number is less than the number before it...",
               "while j > 0 && inputArray[i - 1] > inputArray[i]",
               "{",
               "// ... swap the numbers",
               "let temp = inputArray[i]",
               "inputArray[i] = inputArray[i - 1]",
               "inputArray[i - 1] = temp",
               "// Choose the next number down",
               "j--",
               "}",
               "}",
               "return inputArray",
               "}"]
  },
  {
  "questionType":"Programming",
  "question":"Reorder the following to build a Swift program that describes the mathematical factorial (!) operator.",
  "codePassage": ["func factorial(inputNumber:Int) -> Int",
                  "{",
                  "if inputNumber < 2",
                  "{",
                  "return 1",
                  "}",
                  "else",
                  "{",
                  "return inputNumber * factorial(inputNumber - 1)",
                  "}",
                  "}"],
  "feedback": ["func factorial(inputNumber:Int) -> Int",
               "{",
               "// Check to see if inputNumber is less than 2...",
               "if inputNumber < 2",
               "{",
               "return 1",
               "}",
               "// ... else recursively call factorial function until it is less than 2",
               "else",
               "{",
               "return inputNumber * factorial(inputNumber - 1)",
               "}",
               "}"]
  },
  {
  "questionType":"Programming",
  "question":"Reorder the following to build a Swift program that performs a binary search on a list of numbers.",
  "codePassage": ["func binarySearch(numberArray:[Double], numberToBeFound:Double) -> Bool",
                  "{",
                  "var lowerBound = 0",
                  "var upperBound = numberArray.count - 1",
                  "while lowerBound <= UpperBound",
                  "{",
                  "let mid = (lowerBound + upperBound)/2",
                  "if numberArray[mid] == numberToBeFound",
                  "{",
                  "return true",
                  "}",
                  "else",
                  "if numberArray[mid] < numberToBeFound",
                  "{",
                  "lowerBound = mid + 1",
                  "}",
                  "else",
                  "if numberArray[mid] > numberToBeFound",
                  "{",
                  "upperBound = mid - 1",
                  "}",
                  "else",
                  "{",
                  "return false",
                  "}",
                  "}",
                  "}"],
  "feedback": ["func binarySearch(numberArray:[Double], numberToBeFound:Double) -> Bool",
               "{",
               "// Set lower and upper bounds to ends of list",
               "var lowerBound = 0",
               "var upperBound = numberArray.count - 1",
               "// Keep looping until lower bound is less than or equal to upper bound",
               "while lowerBound <= UpperBound",
               "{",
               "// Find the midpoint between the upper and lower bounds",
               "let mid = (lowerBound + upperBound)/2",
               "// If the number to be found is at that position, return true",
               "if numberArray[mid] == numberToBeFound",
               "{",
               "return true",
               "}",
               "// Else if the number at that position is less than the number to be found...",
               "else",
               "if numberArray[mid] < numberToBeFound",
               "{",
               "// ... disregard all the numbers at positions below mid]",
               "lowerBound = mid + 1",
               "}",
               "// Else if the number at that position is more than the number to be found...",
               "else",
               "if numberArray[mid] > numberToBeFound",
               "{",
               "// ... disregard all the numbers at positions above mid]",
               "upperBound = mid - 1",
               "}",
               "// Else number cannot be found, return false",
               "else",
               "{",
               "return false",
               "}",
               "}",
               "}"]
  },
  {
  "questionType":"Programming",
  "question":"Reorder the following to build a Swift program that performs a linear search on a list of numbers.",
  "codePassage": ["func linearSearch(numberArray:[Double], numberToBeFound:Double) -> Bool",
                  "{",
                  "var i:Int = 0",
                  "var found:Bool = false",
                  "while !found && i < numberArray.count",
                  "{",
                  "if numberArray[i] == numberToBeFound",
                  "{",
                  "found = true",
                  "}",
                  "else",
                  "{",
                  "i++",
                  "}",
                  "}",
                  "return found",
                  "}"],
  "feedback": ["func linearSearch(numberArray:[Double], numberToBeFound:Double) -> Bool",
               "{",
               "// Declare counter and boolean variables",
               "var i:Int = 0",
               "var found:Bool = false",
               "// Loop while found is false and i hasn't been through the whole list",
               "while !found && i < numberArray.count",
               "{",
               "// If the number has been found, set found variable to true",
               "if numberArray[i] == numberToBeFound",
               "{",
               "found = true",
               "}",
               "// Else increment counter",
               "else",
               "{",
               "i++",
               "}",
               "}",
               "return found",
               "}"]
  },
  {
  "questionType":"Programming",
  "question":"Put the following big-O algorithm efficiencies in descending order (most efficient at the top).",
  "codePassage": ["O(1)",
                  "O(log(n))",
                  "O(n)",
                  "O(nlog(n))",
                  "O(n^2)",
                  "O(n^3)",
                  "O(2^n)"],
  "feedback": ["// The correct order is shown below:",
               "O(1)",
               "O(log(n))",
               "O(n)",
               "O(nlog(n))",
               "O(n^2)",
               "O(n^3)",
               "O(2^n)"]
  },
  {
  "questionType":"Programming",
  "question":"List the following sorting algorithms in terms of their worst case big-O time complexity (quickest at the top).",
  "codePassage": ["Radix Sort",
                  "Mergesort",
                  "Quicksort"],
  "feedback": ["// Radix sort is of O(nk) time complexity",
               "Radix Sort",
               "// Mergesort is of O(nlog(n)) time complexity",
               "Mergesort",
               "// Quicksort is of O(n^2) time complexity",
               "Quicksort"]
  },
  {
  "questionType":"Programming",
  "question":"List the following sorting algorithms in terms of their big-O space complexity (least memory at the top).",
  "codePassage": ["Bubble Sort",
                  "Quicksort",
                  "Timsort"],
  "feedback": ["// Bubble Sort is of O(1) space complexity",
               "Bubble Sort",
               "// Quicksort is of O(nlog(n)) space complexity",
               "Quicksort",
               "// Timsort is of O(n) space complexity",
               "Timsort"]
  }
  ]